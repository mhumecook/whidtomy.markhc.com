# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class ParticleFootprint(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, depth: int=None, width: int=None, height: int=None, units: str=None):  # noqa: E501
        """ParticleFootprint - a model defined in Swagger

        :param depth: The depth of this ParticleFootprint.  # noqa: E501
        :type depth: int
        :param width: The width of this ParticleFootprint.  # noqa: E501
        :type width: int
        :param height: The height of this ParticleFootprint.  # noqa: E501
        :type height: int
        :param units: The units of this ParticleFootprint.  # noqa: E501
        :type units: str
        """
        self.swagger_types = {
            'depth': int,
            'width': int,
            'height': int,
            'units': str
        }

        self.attribute_map = {
            'depth': 'depth',
            'width': 'width',
            'height': 'height',
            'units': 'units'
        }
        self._depth = depth
        self._width = width
        self._height = height
        self._units = units

    @classmethod
    def from_dict(cls, dikt) -> 'ParticleFootprint':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The particleFootprint of this ParticleFootprint.  # noqa: E501
        :rtype: ParticleFootprint
        """
        return util.deserialize_model(dikt, cls)

    @property
    def depth(self) -> int:
        """Gets the depth of this ParticleFootprint.


        :return: The depth of this ParticleFootprint.
        :rtype: int
        """
        return self._depth

    @depth.setter
    def depth(self, depth: int):
        """Sets the depth of this ParticleFootprint.


        :param depth: The depth of this ParticleFootprint.
        :type depth: int
        """

        self._depth = depth

    @property
    def width(self) -> int:
        """Gets the width of this ParticleFootprint.


        :return: The width of this ParticleFootprint.
        :rtype: int
        """
        return self._width

    @width.setter
    def width(self, width: int):
        """Sets the width of this ParticleFootprint.


        :param width: The width of this ParticleFootprint.
        :type width: int
        """

        self._width = width

    @property
    def height(self) -> int:
        """Gets the height of this ParticleFootprint.


        :return: The height of this ParticleFootprint.
        :rtype: int
        """
        return self._height

    @height.setter
    def height(self, height: int):
        """Sets the height of this ParticleFootprint.


        :param height: The height of this ParticleFootprint.
        :type height: int
        """

        self._height = height

    @property
    def units(self) -> str:
        """Gets the units of this ParticleFootprint.

        Which units are used to measure the size of the particle  # noqa: E501

        :return: The units of this ParticleFootprint.
        :rtype: str
        """
        return self._units

    @units.setter
    def units(self, units: str):
        """Sets the units of this ParticleFootprint.

        Which units are used to measure the size of the particle  # noqa: E501

        :param units: The units of this ParticleFootprint.
        :type units: str
        """

        self._units = units
